// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: protos/monitor.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LocationMonitor_MonitorDeviceLocationV1_FullMethodName = "/location.engine.protos.LocationMonitor/MonitorDeviceLocationV1"
	LocationMonitor_MonitorBeaconLocationV1_FullMethodName = "/location.engine.protos.LocationMonitor/MonitorBeaconLocationV1"
)

// LocationMonitorClient is the client API for LocationMonitor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocationMonitorClient interface {
	MonitorDeviceLocationV1(ctx context.Context, in *MonitorDeviceLocationRequestV1, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MonitorDeviceLocationStreamEventV1], error)
	MonitorBeaconLocationV1(ctx context.Context, in *MonitorBeaconLocationRequestV1, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MonitorBeaconLocationStreamEventV1], error)
}

type locationMonitorClient struct {
	cc grpc.ClientConnInterface
}

func NewLocationMonitorClient(cc grpc.ClientConnInterface) LocationMonitorClient {
	return &locationMonitorClient{cc}
}

func (c *locationMonitorClient) MonitorDeviceLocationV1(ctx context.Context, in *MonitorDeviceLocationRequestV1, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MonitorDeviceLocationStreamEventV1], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LocationMonitor_ServiceDesc.Streams[0], LocationMonitor_MonitorDeviceLocationV1_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MonitorDeviceLocationRequestV1, MonitorDeviceLocationStreamEventV1]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LocationMonitor_MonitorDeviceLocationV1Client = grpc.ServerStreamingClient[MonitorDeviceLocationStreamEventV1]

func (c *locationMonitorClient) MonitorBeaconLocationV1(ctx context.Context, in *MonitorBeaconLocationRequestV1, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MonitorBeaconLocationStreamEventV1], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LocationMonitor_ServiceDesc.Streams[1], LocationMonitor_MonitorBeaconLocationV1_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MonitorBeaconLocationRequestV1, MonitorBeaconLocationStreamEventV1]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LocationMonitor_MonitorBeaconLocationV1Client = grpc.ServerStreamingClient[MonitorBeaconLocationStreamEventV1]

// LocationMonitorServer is the server API for LocationMonitor service.
// All implementations must embed UnimplementedLocationMonitorServer
// for forward compatibility.
type LocationMonitorServer interface {
	MonitorDeviceLocationV1(*MonitorDeviceLocationRequestV1, grpc.ServerStreamingServer[MonitorDeviceLocationStreamEventV1]) error
	MonitorBeaconLocationV1(*MonitorBeaconLocationRequestV1, grpc.ServerStreamingServer[MonitorBeaconLocationStreamEventV1]) error
	mustEmbedUnimplementedLocationMonitorServer()
}

// UnimplementedLocationMonitorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLocationMonitorServer struct{}

func (UnimplementedLocationMonitorServer) MonitorDeviceLocationV1(*MonitorDeviceLocationRequestV1, grpc.ServerStreamingServer[MonitorDeviceLocationStreamEventV1]) error {
	return status.Errorf(codes.Unimplemented, "method MonitorDeviceLocationV1 not implemented")
}
func (UnimplementedLocationMonitorServer) MonitorBeaconLocationV1(*MonitorBeaconLocationRequestV1, grpc.ServerStreamingServer[MonitorBeaconLocationStreamEventV1]) error {
	return status.Errorf(codes.Unimplemented, "method MonitorBeaconLocationV1 not implemented")
}
func (UnimplementedLocationMonitorServer) mustEmbedUnimplementedLocationMonitorServer() {}
func (UnimplementedLocationMonitorServer) testEmbeddedByValue()                         {}

// UnsafeLocationMonitorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocationMonitorServer will
// result in compilation errors.
type UnsafeLocationMonitorServer interface {
	mustEmbedUnimplementedLocationMonitorServer()
}

func RegisterLocationMonitorServer(s grpc.ServiceRegistrar, srv LocationMonitorServer) {
	// If the following call pancis, it indicates UnimplementedLocationMonitorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LocationMonitor_ServiceDesc, srv)
}

func _LocationMonitor_MonitorDeviceLocationV1_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MonitorDeviceLocationRequestV1)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LocationMonitorServer).MonitorDeviceLocationV1(m, &grpc.GenericServerStream[MonitorDeviceLocationRequestV1, MonitorDeviceLocationStreamEventV1]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LocationMonitor_MonitorDeviceLocationV1Server = grpc.ServerStreamingServer[MonitorDeviceLocationStreamEventV1]

func _LocationMonitor_MonitorBeaconLocationV1_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MonitorBeaconLocationRequestV1)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LocationMonitorServer).MonitorBeaconLocationV1(m, &grpc.GenericServerStream[MonitorBeaconLocationRequestV1, MonitorBeaconLocationStreamEventV1]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LocationMonitor_MonitorBeaconLocationV1Server = grpc.ServerStreamingServer[MonitorBeaconLocationStreamEventV1]

// LocationMonitor_ServiceDesc is the grpc.ServiceDesc for LocationMonitor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocationMonitor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "location.engine.protos.LocationMonitor",
	HandlerType: (*LocationMonitorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MonitorDeviceLocationV1",
			Handler:       _LocationMonitor_MonitorDeviceLocationV1_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MonitorBeaconLocationV1",
			Handler:       _LocationMonitor_MonitorBeaconLocationV1_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/monitor.proto",
}
